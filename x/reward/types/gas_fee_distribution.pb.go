// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cascadia/reward/v1/gas_fee_distribution.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GasFeeDistribution struct {
	// staking_rewards defines the proportion of gas fees that is
	// to be allocated as staking rewards
	StakingRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=stakingRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stakingRewards"`
	// vecontract_rewards defines the proportion of gas fees that is
	// to be allocated to the ve-contract
	VecontractRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=vecontractRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"vecontractRewards"`
	// nprotocol_rewards defines the proportion of gas fees that is
	// to be allocated to the nprotocol
	PotocolRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=potocolRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"potocolRewards"`
}

func (m *GasFeeDistribution) Reset()         { *m = GasFeeDistribution{} }
func (m *GasFeeDistribution) String() string { return proto.CompactTextString(m) }
func (*GasFeeDistribution) ProtoMessage()    {}
func (*GasFeeDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c956a38b5f877142, []int{0}
}
func (m *GasFeeDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasFeeDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasFeeDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasFeeDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasFeeDistribution.Merge(m, src)
}
func (m *GasFeeDistribution) XXX_Size() int {
	return m.Size()
}
func (m *GasFeeDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_GasFeeDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_GasFeeDistribution proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GasFeeDistribution)(nil), "cascadia.reward.v1.GasFeeDistribution")
}

func init() {
	proto.RegisterFile("cascadia/reward/v1/gas_fee_distribution.proto", fileDescriptor_c956a38b5f877142)
}

var fileDescriptor_c956a38b5f877142 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x4d, 0x4e, 0x2c, 0x4e,
	0x4e, 0x4c, 0xc9, 0x4c, 0xd4, 0x2f, 0x4a, 0x2d, 0x4f, 0x2c, 0x4a, 0xd1, 0x2f, 0x33, 0xd4, 0x4f,
	0x4f, 0x2c, 0x8e, 0x4f, 0x4b, 0x4d, 0x8d, 0x4f, 0xc9, 0x2c, 0x2e, 0x29, 0xca, 0x4c, 0x2a, 0x2d,
	0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x82, 0x29, 0xd7, 0x83, 0x28,
	0xd7, 0x2b, 0x33, 0x94, 0x12, 0x49, 0xcf, 0x4f, 0xcf, 0x07, 0x4b, 0xeb, 0x83, 0x58, 0x10, 0x95,
	0x4a, 0x8b, 0x98, 0xb8, 0x84, 0xdc, 0x13, 0x8b, 0xdd, 0x52, 0x53, 0x5d, 0x90, 0x8c, 0x11, 0x0a,
	0xe3, 0xe2, 0x2b, 0x2e, 0x49, 0xcc, 0xce, 0xcc, 0x4b, 0x0f, 0x02, 0x1b, 0x50, 0x2c, 0xc1, 0xa8,
	0xc0, 0xa8, 0xc1, 0xe9, 0xa4, 0x77, 0xe2, 0x9e, 0x3c, 0xc3, 0xad, 0x7b, 0xf2, 0x6a, 0xe9, 0x99,
	0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9, 0xc5, 0x50,
	0x4a, 0xb7, 0x38, 0x25, 0x5b, 0xbf, 0xa4, 0xb2, 0x20, 0xb5, 0x58, 0xcf, 0x25, 0x35, 0x39, 0x08,
	0xcd, 0x14, 0xa1, 0x18, 0x2e, 0xc1, 0xb2, 0xd4, 0xe4, 0xfc, 0xbc, 0x92, 0xa2, 0xc4, 0xe4, 0x12,
	0x98, 0xd1, 0x4c, 0x64, 0x19, 0x8d, 0x69, 0x10, 0xc8, 0xd5, 0x05, 0xf9, 0x25, 0xf9, 0xc9, 0xf9,
	0x39, 0x30, 0xa3, 0x99, 0xc9, 0x73, 0x35, 0xaa, 0x29, 0x4e, 0xfe, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31,
	0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x8a, 0x6c, 0x22, 0x34, 0xcc, 0xd3, 0xf2, 0x4b, 0xf3, 0x52,
	0x12, 0x41, 0xc1, 0x08, 0x17, 0xd2, 0xaf, 0x80, 0xc5, 0x1b, 0xd8, 0x92, 0x24, 0x36, 0x70, 0xe0,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x39, 0x87, 0x6d, 0xd7, 0x01, 0x00, 0x00,
}

func (m *GasFeeDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasFeeDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasFeeDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PotocolRewards.Size()
		i -= size
		if _, err := m.PotocolRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGasFeeDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.VecontractRewards.Size()
		i -= size
		if _, err := m.VecontractRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGasFeeDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.StakingRewards.Size()
		i -= size
		if _, err := m.StakingRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGasFeeDistribution(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGasFeeDistribution(dAtA []byte, offset int, v uint64) int {
	offset -= sovGasFeeDistribution(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GasFeeDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingRewards.Size()
	n += 1 + l + sovGasFeeDistribution(uint64(l))
	l = m.VecontractRewards.Size()
	n += 1 + l + sovGasFeeDistribution(uint64(l))
	l = m.PotocolRewards.Size()
	n += 1 + l + sovGasFeeDistribution(uint64(l))
	return n
}

func sovGasFeeDistribution(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGasFeeDistribution(x uint64) (n int) {
	return sovGasFeeDistribution(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GasFeeDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGasFeeDistribution
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasFeeDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasFeeDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasFeeDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VecontractRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasFeeDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VecontractRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PotocolRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasFeeDistribution
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PotocolRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGasFeeDistribution(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGasFeeDistribution
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGasFeeDistribution(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGasFeeDistribution
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGasFeeDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGasFeeDistribution
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGasFeeDistribution
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGasFeeDistribution
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGasFeeDistribution
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGasFeeDistribution        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGasFeeDistribution          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGasFeeDistribution = fmt.Errorf("proto: unexpected end of group")
)
